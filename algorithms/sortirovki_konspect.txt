КВАДРАТНЫЕ СОРТИРОВКИ
Кол-во операций которые требуются чтобы отсортировать
массив равно примерно O(n**2), где n - длина массива.
1+2+...(N-1) = N*(N-1)/2
Инвариантность - нечто неизменяемое.


1. Сортировка вставками (insert sort)
Первый элемент массива считается уже упорядоченным. Постепенно
упорядоченная часть расширяется, считывается следующий
элемент в массиве, сравнивается с предыдущим упорядоченным,
если элемент меньше, они меняются местами, и элемент 
сравнивается со следующим предыдущим элементом. Важно, что перед сравнением
алгоритм сначала спрашивает, являются ли сравниваемые элементы
началом массива. Потому что если пойдет сравнение с -1 
элементом, случится нечто очень плохое.
КОл-во проходов для реализации: n - 1
Инвариантность: с начала

def insert_sort(A):
    """ сортировка списка A вставками"""
    N = len(A)
    for top in range (1, N):
        k = top
        while k > 0 and A[k-1] > A[k]:
            A[k], A[k-1] = A[k-1], A[k]
            k -= 1

2. Сортировка методом выбора (choise sort)
Первый элемент принимается за минимум, все последующие элементы
сравниваются с ним. Если находится элемент меньше текущего 
минимума, они меняются местами. Пока не найден минимум,
упорядоченная часть массива равна 0. С каждой итерацией она 
увеличивается на 1. Окончательная упорядоченная часть массива не
участвует в последующих итерациях. Последний элемент не
сортируется.
Кол-во проходов для реализации: n - 1
Инвариантность: с начала

def choise_sort(A):
    """ сортировка списка A вставками"""
    N = len(A)
    for pos in range(0, N-1):
        for k in range(pos+1, N):
            if A[k] < A[pos]:
                A[k], A[pos] = A[pos], A[k]

3. Сортировка методом пузырька (bubble sort)
Наибольший элемент массива "всплывает" наверх как пузырек.
Кол-во проходов для реализации: n - 1
Инвариантность: с конца

def bubble_sort(A):
    """ сортировка списка A вставками"""
    N = len(A)
    for bypass in range(1, N):
        for k in range(0, N-bypass):
            if A[k] > A [k+1]:
                A[k], A[k+1] = A[k+1], A[k]



def test_sort(sort_algorithm):
    print("Тестируем: ", sort_algorithm.__doc__)
    print("testcase #1: ", end = "")
    A = [4, 2, 5, 1, 3]
    A_sorted = [1, 2, 3, 4, 5]
    sort_algorithm(A)
    print('Ok' if A == A_sorted else 'Fail')

    print("testcase #2: ", end = "")
    A = list(range(10, 20)) + list(range(0,10))
    A_sorted = list(range(20))
    sort_algorithm(A)
    print('Ok' if A == A_sorted else 'Fail')

    print("testcase #3: ", end = "")
    A = [4, 2, 5, 2, 1]
    A_sorted = [1, 2, 2, 4, 4]
    sort_algorithm(A)
    print('Ok' if A == A_sorted else 'Fail')

if __nano__ == "__main__":
    test_sort(insert_sort)
    test_sort(choise_sort)
    test_sort(bubble_sort)

4. Сортировка подсчетом (count sort)
Требует O(N) времени и O(M) памяти, где М - кол-во разл.эл.


N = [1, 6, 4, 8, 5, 3, 9, 0, 1, 4, 6, 3, 7, 8]
F = [0] * 10
# частотный анализ
for i in range(N):
    x = int(inpu())
    F[x] += 1
#на выходе массив из частотного анализа, после этого
#элементы N распечатываются нужное кол-во раз